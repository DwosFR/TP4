/**************************************************************
Auteur : Valynseele Alexis
Date :  26/11/2019 - Seance 1
Titre : TP 4 - DA (9h)
Fichier TODO.txt
**************************************************************/

SEANCE 1 : 26/11/2019

1ere Heure:

Creation du repo TP4
Creation des fichiers README et TODO
Creation des fichiers main.c et ma_bibliotheque.c et son entete .h
Mise en lien avec GitHub : https://github.com/ValynseeleAlexis/TP4

2ème Heure : 

Partie I :

-10h10min Creation du fichier tabs_mots_dynamique.c et son entete .h
-10h15min Creation d'une fonction permettant de recuperer le nombre de mots dans un fichier txt
-10h30min Creation des fonctions permettant la creation et l'affichage d'un tableau de mots dynamique a partir d'un fichier txt 
-10h45min Creation d'une fonction testPartieI pour tester le tableau de mots dynamique dans dans ma_bibliotheque.c

3ème Heure :

-11h Creation d'une fonction de recherche de chaîne dans le tab mots
-11h20min Temps perdu a essayer de comprendre comment fonctionne gitignore
-11h30 Fonction recherche chaîne terminée, changements des noms des dossiers 
-11h45 Fonction d'ajout d'un mot en fin de fichier avec fprintf

FIN SEANCE 1

27/11/2019:

-Ajout de void ajoutMotLigneIFichier(char nom[],char string[],int pos,int nbMots) qui permet "d'ajouter un mot dans le fichier" a la ligne voulu.
    En fait la fonction copie le fichier d'origine dans un nouveau fichier jusqu'a la postion voulu ou il rajoute le mot donné puis il copie le reste,il renomme le nouveau fichier avec le nom du fichier d'origne et supprime celui-ci.

-Ajout de commentaire sur tout le code déjà écrit.

-Update du gitignore qui permet d'éviter de suivre les fichiers .vscode avec la fonction git add .

-Ajout de void freeTabMotsDynamique(char **tabMots,int nbMots) permettant de liberer le tableau dynamique de mots


08/12/2019 : 

-Ajout d'une fonction de comparaison entre deux mots selon l'ordre lexicographique

-Ajout d'une fonction de tri à bulles du tableau de mots selon l'ordre lexicographique, permet aussi de recuperer le temps d'excution du tri

-Ajout d'une fonction d'écriture du tableau de mots dans un fichier dont le nom est passé en paramètre

-Ajout d'une fonction de calcul de points selon le barème du polycopié
On utilise un tableau bareme contenant aux indices correspondant aux codes ascii des lettres en majuscules les valeurs du bareme
Ainsi pour savoir la valeur d'une lettre d'un mot il suffit de faire bareme['lettre'], la valeur ascii de la lettre permettant d'acceder a sa valeur dans le bareme

-Ajout d'une fonction de creation de bareme permettant à l'aide du fichier lettre_pts.txt de créer un tableau bareme comme-celui utilisé dans la fonction de calcul de points
Pour se faire on recupere chaque ligne du fichier,on regarde la lette (buffer[0]) et l'on mets la valeur de la lettre(buffer[2]) au bon indice dans le tableau bareme (donc en fonction du code ascii de la lettre en majuscule)

-Ajout d'une fonction de calcul de points selon le bareme situé dans lettre_pts.txt
Il s'agit du même code que celui utilisé dans la fonction de calcul de points, la seul différence étant que le tableau bareme est crée a l'aide de la fonction de creation de bareme


Reste a faire pour la Partie I :

-Les différents tris avec qsort et leurs temps d'excutions

-Améliorer les commentaires de chaque fonctions

-Finaliser le programme de test de la partie I


09/12/2019:

-Ajout des fonctions compareLexicographique et compraLongueur pouvant être utilisée avec qsort

-Ajout d'une fonction de tri avec qsort prenant en paramètre une fonction de comparaison générique int (*compare)(const void *,const void *)

-Refonte du sous-programme de test de la partie I avec un menu afin de tester chaque fonctionalité séparement

-Il ne reste donc que les commentaires a faire pour la partie I




SEANCE 2 : 10/12/2019

2H passé a reparer le menu : lecture des variables menu1 et menu2 avec getchar au lieu de scanf afin d'éviter les erreurs d'ecrasement mémoires des autres variables

-Ajout des fichiers listes_chainees.c et listes_chainees.h pour gerer les fonctions de la Partie II

-Modification de la commande de compilation

15/12/2019:

-Ajout des fonctions de création et d'affichage d'un tableau de listes chainées chaque listes contenant des cellules contenant un mot alloué dynamiquement.


